import logging
import aiohttp
from datetime import datetime, timedelta, timezone
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from config import API_BASE_URL
from .states import (
    AWAITING_RECEIVER,
    AWAITING_TIME,
    AWAITING_DURATION,
    AWAITING_TOPIC
)
from .common import show_main_menu

logger = logging.getLogger(__name__)

async def show_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    token = context.user_data.get('token')
    if not token:
        await query.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.")
        return
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{API_BASE_URL}/api/appointments",
                headers={"Authorization": f"Bearer {token}"}
            ) as response:
                if response.status != 200:
                    logger.error(f"Error fetching appointments: {response.status} - {await response.text()}")
                    await query.message.edit_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å—Ç—Ä–µ—á.")
                    return
                
                appointments_data = await response.json()
                appointments = appointments_data if isinstance(appointments_data, list) else appointments_data.get("items", [])
                
                if not appointments:
                    await query.message.edit_text(
                        "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—Å—Ç—Ä–µ—á.",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')]])
                    )
                    return

                text_parts = ["üìÖ –í–∞—à–∏ –≤—Å—Ç—Ä–µ—á–∏:\n\n"]
                for idx, appointment in enumerate(appointments, 1):
                    try:
                        # Parse start and end times
                        start_time = datetime.fromisoformat(appointment.get('startTime', '').replace('Z', '+00:00'))
                        end_time = datetime.fromisoformat(appointment.get('endTime', '').replace('Z', '+00:00'))
                        
                        # Convert to Moscow time (UTC+3)
                        moscow_tz = timezone(timedelta(hours=3))
                        start_time_msk = start_time.astimezone(moscow_tz)
                        end_time_msk = end_time.astimezone(moscow_tz)
                        
                        # Format date and times
                        date_str = start_time_msk.strftime("%d.%m.%Y")
                        start_time_str = start_time_msk.strftime("%H:%M")
                        end_time_str = end_time_msk.strftime("%H:%M")
                        
                        text_parts.append(
                            f"{idx}. {appointment.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')}\n"
                            f"   üìÖ –î–∞—Ç–∞: {date_str}\n"
                            f"   ‚è∞ –í—Ä–µ–º—è: {start_time_str} - {end_time_str}\n"
                            f"   üìä –°—Ç–∞—Ç—É—Å: {appointment.get('statusName', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                        )
                    except (ValueError, TypeError) as e:
                        logger.error(f"Error formatting appointment time: {e}")
                        text_parts.append(
                            f"{idx}. {appointment.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')}\n"
                            f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏\n"
                            f"   üìä –°—Ç–∞—Ç—É—Å: {appointment.get('statusName', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                        )

                text = "".join(text_parts)
                if len(text) > 4090:
                    text = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Å—Ç—Ä–µ—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ.\n" + text[:3800] + "..."

                await query.message.edit_text(
                    text,
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')]])
                )

    except Exception as e:
        logger.error(f"Appointments error: {e}", exc_info=True)
        await query.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å—Ç—Ä–µ—á.")

async def create_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    token = context.user_data.get('token')
    if not token:
        await query.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.")
        return
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{API_BASE_URL}/api/Users/receivers",
                headers={"Authorization": f"Bearer {token}"}
            ) as response:
                if response.status != 200:
                    logger.error(f"Error fetching receivers: {response.status} - {await response.text()}")
                    await query.message.edit_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π.")
                    return
                
                receivers = await response.json()
                if not receivers:
                    await query.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π.")
                    return

                keyboard = []
                for receiver in receivers:
                    keyboard.append([
                        InlineKeyboardButton(
                            receiver.get('fullName', '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
                            callback_data=f"select_receiver_{receiver['id']}"
                        )
                    ])
                keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')])

                await query.message.edit_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                context.user_data['state'] = AWAITING_RECEIVER

    except Exception as e:
        logger.error(f"Create appointment error: {e}", exc_info=True)
        await query.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏.")

async def handle_receiver_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        receiver_id = query.data.split('_')[-1]  # Get the UUID string directly
        context.user_data['selected_receiver_id'] = receiver_id
        
        await query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024 14:30):"
        )
        context.user_data['state'] = AWAITING_TIME
        
    except Exception as e:
        logger.error(f"Receiver selection error: {e}", exc_info=True)
        await query.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è.")

async def handle_start_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        input_text = update.message.text.strip()
        logger.info(f"User {user_id} - Handling start time input: {input_text}")

        try:
            start_time = datetime.strptime(input_text, "%d.%m.%Y %H:%M")
            if start_time < datetime.now():
                await update.message.reply_text("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è:")
                context.user_data['state'] = AWAITING_TIME
                return
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.01.2024 14:30):")
            context.user_data['state'] = AWAITING_TIME
            return

        context.user_data['temp_start_time'] = start_time
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30, 45, 60):\n"
        )
        context.user_data['state'] = AWAITING_DURATION
        
    except Exception as e:
        logger.error(f"Start time input error for user {update.effective_user.id}: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        context.user_data['state'] = AWAITING_TIME

async def handle_duration_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        input_text = update.message.text.strip()
        logger.info(f"User {user_id} - Handling duration input: {input_text}")

        temp_start_time = context.user_data.get('temp_start_time')
        if not temp_start_time:
            logger.error(f"User {user_id} - temp_start_time not found. Resetting.")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —É—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
            context.user_data['state'] = None
            await show_main_menu(update, context)
            return

        try:
            duration_minutes = int(input_text)
            if duration_minutes <= 0:
                await update.message.reply_text("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç:")
                context.user_data['state'] = AWAITING_DURATION
                return
            
            context.user_data['appointment_payload'] = {
                'receiver_id': context.user_data['selected_receiver_id'],
                'start_time': temp_start_time.isoformat()
            }
            context.user_data['calculated_end_time'] = temp_start_time + timedelta(minutes=duration_minutes)
            context.user_data.pop('temp_start_time', None)
            
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –≤—Å—Ç—Ä–µ—á–∏:")
            context.user_data['state'] = AWAITING_TOPIC
            
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30):")
            context.user_data['state'] = AWAITING_DURATION
            
    except Exception as e:
        logger.error(f"Duration input error: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")
        context.user_data['state'] = AWAITING_DURATION

async def handle_topic_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        topic = update.message.text.strip()
        logger.info(f"User {user_id} - Handling topic/title input: {topic}")

        if not topic:
            await update.message.reply_text("–¢–µ–º–∞/–∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É:")
            context.user_data['state'] = AWAITING_TOPIC
            return

        appointment_payload = context.user_data.get('appointment_payload')
        if not appointment_payload:
            logger.error(f"User {user_id} - appointment_payload not found. Resetting.")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ —É—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            context.user_data['state'] = None
            await show_main_menu(update, context)
            return
            
        # Format the appointment data according to the API schema
        formatted_payload = {
            "receiverId": context.user_data['selected_receiver_id'],
            "startTime": appointment_payload['start_time'],
            "endTime": context.user_data['calculated_end_time'].isoformat(),
            "topic": topic
        }

        token = context.user_data.get('token')
        logger.info(f"User {user_id} - Attempting to create appointment. Payload: {formatted_payload}")
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{API_BASE_URL}/api/appointments",
                headers={"Authorization": f"Bearer {token}"},
                json=formatted_payload
            ) as response:
                if response.status == 201:
                    await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
                    logger.info(f"User {user_id} - Appointment request created successfully.")
                else:
                    response_text = await response.text()
                    logger.error(f"User {user_id} - Error creating appointment: {response.status} - {response_text}. Payload: {formatted_payload}")
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ (–ö–æ–¥: {response.status}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        context.user_data.pop('appointment_payload', None)
        context.user_data.pop('selected_receiver_id', None)
        context.user_data.pop('calculated_end_time', None)
        context.user_data['state'] = None
        await show_main_menu(update, context)
                
    except Exception as e:
        logger.error(f"Topic input or API call error for user {update.effective_user.id}: {e}", exc_info=True)
        await update.message.reply_text("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        context.user_data['state'] = None
        await show_main_menu(update, context)

async def manage_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    
    token = context.user_data.get('token')
    if not token:
        await query.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.")
        return
    
    role = context.user_data.get('role')
    if role not in ['–°–µ–∫—Ä–µ—Ç–∞—Ä—å', '–ü—Ä–∏–Ω–∏–º–∞—é—â–µ–µ –ª–∏—Ü–æ', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä']:
        await query.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∞–º–∏.")
        return
    
    try:
        logger.info(f"User {user_id} (Role: {role}) - Managing appointments (fetching list).")
        async with aiohttp.ClientSession() as session:
            headers = {'Authorization': f'Bearer {token}'}
            async with session.get(f"{API_BASE_URL}/api/appointments", headers=headers) as response:
                if response.status != 200:
                    logger.error(f"Failed to get appointments for manager: {response.status} - {await response.text()}")
                    await query.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')]]))
                    return

                appointments_data = await response.json()
                appointments = appointments_data if isinstance(appointments_data, list) else appointments_data.get("items", [])
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Å—Ç—Ä–µ—á–∏, –∏—Å–∫–ª—é—á–∞—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã–µ
                filtered_appointments = [
                    app for app in appointments 
                    if app.get('statusName') not in ['–û—Ç–º–µ–Ω–µ–Ω–∞', '–ó–∞–≤–µ—Ä—à–µ–Ω–∞', '–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞']
                ]
                
                if not filtered_appointments:
                    await query.message.edit_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')]]))
                    return

                text_parts = ["üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∞–º–∏:\n\n"]
                keyboard_buttons = []
                
                for appointment in filtered_appointments:
                    appointment_id = appointment.get('id')
                    if not appointment_id:
                        continue
                        
                    try:
                        # Parse and format times
                        start_time = datetime.fromisoformat(appointment.get('startTime', '').replace('Z', '+00:00'))
                        end_time = datetime.fromisoformat(appointment.get('endTime', '').replace('Z', '+00:00'))
                        
                        # Convert to Moscow time (UTC+3)
                        moscow_tz = timezone(timedelta(hours=3))
                        start_time_msk = start_time.astimezone(moscow_tz)
                        end_time_msk = end_time.astimezone(moscow_tz)
                        
                        # Format date and times
                        date_str = start_time_msk.strftime("%d.%m.%Y")
                        start_time_str = start_time_msk.strftime("%H:%M")
                        end_time_str = end_time_msk.strftime("%H:%M")
                        
                        text_parts.append(
                            #f"ID: {appointment_id}\n"
                            f"üìù –¢–µ–º–∞: {appointment.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')}\n"
                            f"üë§ –ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å: {appointment.get('visitorFullName', '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                            f"üë• –ü—Ä–∏–Ω–∏–º–∞—é—â–∏–π: {appointment.get('receiverFullName', '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                            f"üìÖ –î–∞—Ç–∞: {date_str}\n"
                            f"‚è∞ –í—Ä–µ–º—è: {start_time_str} - {end_time_str}\n"
                            f"üìç –ú–µ—Å—Ç–æ: {appointment.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                            f"üìä –°—Ç–∞—Ç—É—Å: {appointment.get('statusName', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                            f"üìé –í–ª–æ–∂–µ–Ω–∏–π: {len(appointment.get('attachments', []))}\n\n"
                        )
                    except (ValueError, TypeError) as e:
                        logger.error(f"Error formatting appointment time: {e}")
                        text_parts.append(
                            #f"ID: {appointment_id}\n"
                            f"üìù –¢–µ–º–∞: {appointment.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')}\n"
                            f"üë§ –ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å: {appointment.get('visitorFullName', '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                            f"üë• –ü—Ä–∏–Ω–∏–º–∞—é—â–∏–π: {appointment.get('receiverFullName', '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏\n"
                            f"üìä –°—Ç–∞—Ç—É—Å: {appointment.get('statusName', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                        )
                    
                    status = appointment.get('statusName', '')
                    if status == '–ó–∞–ø—Ä–æ—à–µ–Ω–∞':
                        keyboard_buttons.extend([
                            [
                                InlineKeyboardButton(f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å {appointment.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')}", callback_data=f"app_action:approve:{appointment_id}"),
                                InlineKeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {appointment.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')}", callback_data=f"app_action:cancel:{appointment_id}")
                            ]
                        ])
                    elif status == '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞':
                        keyboard_buttons.append([
                            InlineKeyboardButton(f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {appointment.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')}", callback_data=f"app_action:reject:{appointment_id}")
                        ])
                
                keyboard_buttons.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='manage_appointments')])
                keyboard_buttons.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')])
                
                text = "".join(text_parts)
                if len(text) > 4090:
                    text = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Å—Ç—Ä–µ—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ.\n" + text[:3800] + "..."
                
                await query.message.edit_text(
                    text,
                    reply_markup=InlineKeyboardMarkup(keyboard_buttons)
                )
                
    except Exception as e:
        logger.error(f"Manage appointments error: {e}", exc_info=True)
        await query.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∞–º–∏.")

async def handle_appointment_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    
    try:
        # Parse the callback data
        parts = query.data.split(':')
        if len(parts) != 3:
            logger.error(f"Invalid callback data format: {query.data}")
            await query.message.edit_text("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è.")
            return
            
        action = parts[1]
        appointment_id = parts[2]
        
        logger.info(f"User {user_id} - Performing action '{action}' on appointment_id {appointment_id}")
        
        token = context.user_data.get('token')
        if not token:
            await query.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.")
            return
        
        status_map = {
            'approve': {'statusId': 2, 'statusName': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞'},
            'reject': {'statusId': 5, 'statusName': '–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞'},
            'cancel': {'statusId': 3, 'statusName': '–û—Ç–º–µ–Ω–µ–Ω–∞'}
        }
        
        status_data = status_map.get(action)
        if not status_data:
            logger.error(f"Unknown action: {action}")
            await query.message.edit_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
            return
        
        async with aiohttp.ClientSession() as session:
            async with session.patch(
                f"{API_BASE_URL}/api/Appointments/{appointment_id}",
                headers={"Authorization": f"Bearer {token}"},
                json={"statusId": status_data['statusId']}
            ) as response:
                if response.status in [200, 204]:  # Both 200 and 204 indicate success
                    await query.message.edit_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –≤—Å—Ç—Ä–µ—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{status_data['statusName']}'.")
                    await manage_appointments(update, context)
                else:
                    response_text = await response.text()
                    logger.error(f"Error updating appointment status: {response.status} - {response_text}")
                    await query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å—Ç—Ä–µ—á–∏ (–ö–æ–¥: {response.status}).")
                    
    except Exception as e:
        logger.error(f"Appointment action error: {e}", exc_info=True)
        await query.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –≤—Å—Ç—Ä–µ—á–µ–π.")