import logging
import aiohttp
from datetime import datetime, timezone, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import telegram

from config import API_BASE_URL

logger = logging.getLogger(__name__)

async def update_queue_item_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—Å—Ç—Ä–µ—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    data = query.data.split(':')
    item_id = data[1]
    new_status = int(data[2])
    
    token = context.user_data.get('token')
    if not token:
        await query.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.")
        return

    try:
        url = f"{API_BASE_URL}/api/queue_items/{item_id}"
        headers = {'Authorization': f'Bearer {token}'}
        payload = {"newStatusId": new_status}
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ PATCH –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ {url} –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—Å—Ç—Ä–µ—á–∏ {item_id} –Ω–∞ {new_status}")
        
        async with aiohttp.ClientSession() as session:
            async with session.patch(url, json=payload, headers=headers) as response:
                if response.status in [200, 204]:  # 204 No Content —Ç–æ–∂–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å–ø–µ—Ö–æ–º
                    logger.info(f"–°—Ç–∞—Ç—É—Å –≤—Å—Ç—Ä–µ—á–∏ {item_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_status}")
                    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
                    await show_queue(update, context)
                else:
                    error_text = await response.text()
                    logger.error(f"Failed to update queue item status: {response.status} - {error_text}")
                    await query.message.edit_text(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å—Ç—Ä–µ—á–∏ (–∫–æ–¥ {response.status}).",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')]])
                    )
    except Exception as e:
        logger.error(f"Error updating queue item status: {e}", exc_info=True)
        await query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å—Ç—Ä–µ—á–∏.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')]])
        )

async def show_queue(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id_telegram = update.effective_user.id 
    
    token = context.user_data.get('token')
    
    logger.info(f"User {user_id_telegram} - In show_queue. Token in context: {bool(token)}")
    if token:
        logger.debug(f"User {user_id_telegram} - Token (partial for log): Bearer {token[:15]}...{token[-15:]}")
    else:
        await query.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å (—Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç).")
        return
    
    role = context.user_data.get('role')
    if role not in ['–°–µ–∫—Ä–µ—Ç–∞—Ä—å', '–ü—Ä–∏–Ω–∏–º–∞—é—â–µ–µ –ª–∏—Ü–æ', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä']:
        await query.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        return

    receiver_api_id = context.user_data.get('user_id_from_db') 
    if not receiver_api_id:
        logger.error(f"API user ID (receiver_api_id) not found in context for user {user_id_telegram} to view queue.")
        await query.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—á–µ—Ä–µ–¥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞.")
        return

    queue_endpoint = f"{API_BASE_URL}/api/receivers/{receiver_api_id}/queue"
    
    logger.info(f"User {user_id_telegram} (Role: {role}, API ID: {receiver_api_id}) - Attempting to fetch queue from {queue_endpoint}.")

    try:
        async with aiohttp.ClientSession() as session:
            headers = {'Authorization': f'Bearer {token}'} 
            logger.debug(f"User {user_id_telegram} - Requesting {queue_endpoint} with headers: {headers.keys()}") 

            async with session.get(queue_endpoint, headers=headers) as response:
                response_status = response.status
                response_body_text = await response.text() 

                if response_status == 200:
                    try:
                        queue_items = await response.json() 
                        logger.info(f"Received queue items: {len(queue_items)} items")
                        
                        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏
                        filtered_queue_items = [
                            item for item in queue_items 
                            if item.get('statusId') not in [4, 5]  # 4 = –ó–∞–≤–µ—Ä—à–µ–Ω–æ, 5 = –ü—Ä–æ–ø—É—â–µ–Ω–æ
                        ]
                        
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏
                        filtered_queue_items.sort(key=lambda x: x.get('position', 0))
                        
                        logger.info(f"Filtered and sorted queue items: {len(filtered_queue_items)} items (excluding completed)")
                        
                        for idx, item in enumerate(filtered_queue_items, 1):
                            logger.info(f"Queue item {idx}: ID={item.get('id')}, Position={item.get('position')}, Status={item.get('statusName')} (ID: {item.get('statusId')}), Visitor={item.get('visitorFullName')}")
                    except aiohttp.ContentTypeError: 
                        logger.error(f"Queue endpoint {queue_endpoint} returned 200 but content is not JSON. Body: {response_body_text}")
                        await query.message.edit_text("–û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.", 
                                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')]]))
                        return
                    
                    if not isinstance(filtered_queue_items, list):
                        logger.error(f"Unexpected queue data format from {queue_endpoint}. Expected a list, got {type(filtered_queue_items)}: {filtered_queue_items}")
                        await query.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–∏.", 
                                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')]]))
                        return

                    if not filtered_queue_items:
                        msg = "–í –≤–∞—à–µ–π –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π."
                        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')]]
                    else:
                        msg = f"üë• –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å:\n\n"
                        keyboard = []
                        
                        for idx, item in enumerate(filtered_queue_items, 1):
                            position = item.get('position', 0)
                            status_name = item.get('statusName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                            visitor_name = item.get('visitorFullName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                            msg += f"{idx}. {visitor_name} (–ü–æ–∑–∏—Ü–∏—è: {position})\n"
                            msg += f"   –°—Ç–∞—Ç—É—Å: {status_name}\n\n"
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏ –≤ —Å–ø–∏—Å–∫–µ
                            if idx == 1:  # Changed from position == 1 to idx == 1
                                item_id = item.get('id')
                                if item_id:
                                    status_id = item.get('statusId', 0)
                                    logger.info(f"Adding control buttons for first queue item: ID={item_id}, Status ID={status_id}")
                                    if status_id == 1:  # –û–∂–∏–¥–∞–Ω–∏–µ
                                        logger.info("Adding buttons for 'Waiting' status")
                                        keyboard.extend([
                                            [
                                                InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É", callback_data=f"queue_status:{item_id}:2"),
                                                InlineKeyboardButton("‚è∏ –ü–µ—Ä–µ—Ä—ã–≤", callback_data=f"queue_status:{item_id}:3")
                                            ],
                                            [
                                                InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"queue_status:{item_id}:5")
                                            ]
                                        ])
                                    elif status_id == 2:  # –í –ø—Ä–æ—Ü–µ—Å—Å–µ
                                        keyboard.extend([
                                            [
                                                InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"queue_status:{item_id}:4"),
                                                InlineKeyboardButton("‚è∏ –ü–µ—Ä–µ—Ä—ã–≤", callback_data=f"queue_status:{item_id}:3")
                                            ]
                                        ])
                                    elif status_id == 3:  # –ü–µ—Ä–µ—Ä—ã–≤
                                        keyboard.extend([
                                            [
                                                InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"queue_status:{item_id}:2"),
                                                InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"queue_status:{item_id}:5")
                                            ]
                                        ])
                        
                        keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='show_queue')])
                        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')])
                    
                    try:
                        await query.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(keyboard))
                    except telegram.error.BadRequest as e:
                        if "Message is not modified" in str(e):
                            # If the message hasn't changed, just answer the callback query silently
                            await query.answer("–û—á–µ—Ä–µ–¥—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å")
                        else:
                            # If it's a different error, re-raise it
                            raise
                else: 
                    logger.error(f"Failed to get queue from {queue_endpoint} for receiver {receiver_api_id}: {response_status} - Body: {response_body_text}")
                    if response_status == 401:
                         await query.message.edit_text("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (401). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É —Å–Ω–æ–≤–∞ (/logout, –∑–∞—Ç–µ–º /start).", 
                                                  reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')]]))
                    elif response_status == 403:
                         await query.message.edit_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403). –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏.", 
                                                  reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')]]))
                    elif response_status == 404:
                        await query.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –≤–∞—Å (404). –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏.", 
                                                  reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')]]))
                    else:
                        await query.message.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—á–µ—Ä–µ–¥—å (–æ—à–∏–±–∫–∞ {response_status}).", 
                                                  reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')]]))
    except Exception as e:
        logger.error(f"Exception in show_queue function for receiver {receiver_api_id}: {e}", exc_info=True)
        await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—á–µ—Ä–µ–¥–∏.", 
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')]]))