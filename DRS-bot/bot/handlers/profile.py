import logging
import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from config import API_BASE_URL

logger = logging.getLogger(__name__)

async def handle_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    try:
        token = context.user_data.get('token')
        if not token:
            await query.message.edit_text("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å! –ù–∞–∂–º–∏—Ç–µ /start")
            return

        logger.info(f"User {user_id} - Fetching profile from /api/users/me.")
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{API_BASE_URL}/api/users/me", 
                headers={"Authorization": f"Bearer {token}"}
            ) as response:
                if response.status != 200:
                    logger.error(f"Error fetching profile for user {user_id}: {response.status} - {await response.text()}")
                    await query.message.edit_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
                    return
                
                user_data_api = await response.json()
                profile_text = (
                    f"üë§ –í–∞—à –ü—Ä–æ—Ñ–∏–ª—å\n\n"
                    f"–ò–º—è: {user_data_api.get('fullName', user_data_api.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))}\n"
                    f"Email: {user_data_api.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"–†–æ–ª—å: {user_data_api.get('roleName', user_data_api.get('role', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'))}\n"
                    f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data_api.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}" 
                )
                await query.message.edit_text(profile_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')]]))
    except Exception as e:
        logger.error(f"Profile error for user {user_id}: {e}", exc_info=True)
        await query.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.")

async def handle_notifications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    try:
        token = context.user_data.get('token')
        if not token:
            await query.message.edit_text("–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å! –ù–∞–∂–º–∏—Ç–µ /start")
            return

        logger.info(f"User {user_id} - Fetching notifications from /api/notifications.")
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{API_BASE_URL}/api/notifications", 
                headers={"Authorization": f"Bearer {token}"}
            ) as response:
                if response.status != 200:
                    logger.error(f"Error fetching notifications for user {user_id}: {response.status} - {await response.text()}")
                    await query.message.edit_text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
                    return
                
                notifications_list = await response.json() 
                notifications = notifications_list if isinstance(notifications_list, list) else notifications_list.get("items", [])

                if not notifications:
                    text = "–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
                else:
                    text = "üîî –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n"
                    for idx, notif in enumerate(notifications, 1):
                        text += f"{idx}. {notif.get('message', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')}\n"
                
                await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='main_menu')]]))
    except Exception as e:
        logger.error(f"Notifications error for user {user_id}: {e}", exc_info=True)
        await query.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")