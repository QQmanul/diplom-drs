import logging
import aiohttp
from telegram import Update
from telegram.ext import ContextTypes

from config import API_BASE_URL
from bot.database import Database
from .states import AWAITING_LOGIN_CREDENTIALS
from .common import show_main_menu

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"Start command received from user {update.effective_user.id}")
    db = Database()
    user_data_db = db.get_user_auth(update.effective_user.id)
    
    context.user_data.clear()
    context.user_data['state'] = None

    if user_data_db:
        logger.info(f"Found saved auth data for user {update.effective_user.id}")
        token = user_data_db['token']
        context.user_data['token'] = token
        
        # Fetch fresh user data from API
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"{API_BASE_URL}/api/Users/me",
                    headers={"Authorization": f"Bearer {token}"}
                ) as response:
                    if response.status == 200:
                        user_profile = await response.json()
                        context.user_data['role'] = user_profile.get('roleName')
                        context.user_data['user_id_from_db'] = user_profile.get('id')
                        context.user_data['full_name'] = user_profile.get('fullName')
                        
                        if 'signalr_client' in context.bot_data:
                            signalr_client = context.bot_data.get('signalr_client')
                            if signalr_client:
                                try:
                                    await signalr_client.start_connection(update.effective_user.id, token)
                                except Exception as e:
                                    logger.error(f"SignalR connection error on start: {e}")
                        
                        await update.message.reply_text(f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_profile.get('fullName')}!")
                        await show_main_menu(update, context, user_profile.get('roleName'))
                    else:
                        logger.error(f"Failed to fetch user profile: {response.status}")
                        context.user_data['state'] = AWAITING_LOGIN_CREDENTIALS
                        await update.message.reply_text(
                            "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞, –≤–≤–µ–¥—è –≤–∞—à email –∏ –ø–∞—Ä–æ–ª—å, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: user@example.com –≤–∞—à_–ø–∞—Ä–æ–ª—å):"
                        )
        except Exception as e:
            logger.error(f"Error fetching user profile: {e}")
            context.user_data['state'] = AWAITING_LOGIN_CREDENTIALS
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞, –≤–≤–µ–¥—è –≤–∞—à email –∏ –ø–∞—Ä–æ–ª—å, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: user@example.com –≤–∞—à_–ø–∞—Ä–æ–ª—å):"
            )
    else:
        logger.info(f"No saved auth data for user {update.effective_user.id}, requesting login")
        context.user_data['state'] = AWAITING_LOGIN_CREDENTIALS
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: user@example.com –≤–∞—à_–ø–∞—Ä–æ–ª—å):"
        )

async def handle_auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        credentials = update.message.text.strip().split()
        if len(credentials) != 2:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º.")
            return

        email_or_username, password = credentials
        api_login_payload = {"Email": email_or_username, "password": password}
        
        logger.info(f"Attempting login for: {email_or_username} using payload: {api_login_payload}")

        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{API_BASE_URL}/api/auth/login",
                json=api_login_payload
            ) as response:
                if response.status != 200:
                    response_text = await response.text()
                    logger.error(f"Auth API error: {response.status} - {response_text}. Sent Payload: {api_login_payload}")
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    context.user_data['state'] = AWAITING_LOGIN_CREDENTIALS
                    return

                auth_data = await response.json()
                token = auth_data.get('token')
                if not token:
                    logger.error(f"No token in auth response: {auth_data}")
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω.")
                    context.user_data['state'] = AWAITING_LOGIN_CREDENTIALS
                    return

                context.user_data['token'] = token

                # Get user data
                async with session.get(
                    f"{API_BASE_URL}/api/users/me",
                    headers={"Authorization": f"Bearer {token}"}
                ) as response:
                    if response.status != 200:
                        response_text = await response.text()
                        logger.error(f"Error getting user data: {response.status} - {response_text}")
                        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                        context.user_data.pop('token', None)
                        context.user_data['state'] = AWAITING_LOGIN_CREDENTIALS
                        return

                    user_data_api = await response.json()
                    user_id_api = user_data_api.get('id')
                    if not user_id_api:
                        logger.error(f"User ID not found in /users/me response: {user_data_api}")
                        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API.")
                        context.user_data.pop('token', None)
                        context.user_data['state'] = AWAITING_LOGIN_CREDENTIALS
                        return

                    role = user_data_api.get('role', '–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å')
                    full_name = user_data_api.get('fullName', email_or_username)

                    # Save to database
                    db = Database()
                    db.save_user_auth(
                        telegram_id=update.effective_user.id,
                        user_id=user_id_api,
                        token=token,
                        role=role,
                        full_name=full_name
                    )

                    context.user_data['role'] = role
                    context.user_data['user_id_from_db'] = user_id_api
                    logger.info(f"Saved user auth data to database for {full_name}")

                    if 'signalr_client' in context.bot_data:
                        signalr_client = context.bot_data.get('signalr_client')
                        if signalr_client:
                            try:
                                await signalr_client.start_connection(update.effective_user.id, token)
                            except Exception as e:
                                logger.error(f"SignalR connection error after auth: {e}")

                    await update.message.reply_text(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!")
                    await show_main_menu(update, context, role)

    except Exception as e:
        logger.error(f"Auth error: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        context.user_data['state'] = AWAITING_LOGIN_CREDENTIALS

async def logout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        token = context.user_data.get('token')
        
        if token:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{API_BASE_URL}/api/auth/logout",
                    headers={"Authorization": f"Bearer {token}"}
                ) as response:
                    if response.status != 200:
                        logger.error(f"Logout API error: {response.status} - {await response.text()}")
        
        # Clear user data
        context.user_data.clear()
        context.user_data['state'] = None
        
        # Remove from database
        db = Database()
        db.delete_user_auth(user_id)
        
        if 'signalr_client' in context.bot_data:
            signalr_client = context.bot_data.get('signalr_client')
            if signalr_client:
                try:
                    await signalr_client.stop_connection(user_id)
                except Exception as e:
                    logger.error(f"SignalR disconnection error on logout: {e}")
        
        if update.callback_query and update.callback_query.message:
            await update.callback_query.message.edit_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
        elif update.message:
            await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
            
    except Exception as e:
        logger.error(f"Logout error: {e}", exc_info=True)
        if update.callback_query and update.callback_query.message:
            await update.callback_query.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
        elif update.message:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")