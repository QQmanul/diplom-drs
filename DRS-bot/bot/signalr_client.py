import aiohttp
import asyncio
import logging
from typing import Optional

from signalrcore.hub_connection_builder import HubConnectionBuilder
from signalrcore.hub.base_hub_connection import BaseHubConnection
from telegram import Bot

from config import API_BASE_URL # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç

logger = logging.getLogger(__name__)

class SignalRClient:
    def __init__(self, bot: Bot, loop: asyncio.AbstractEventLoop):
        self.connections = {}
        self.hub_url = f"{API_BASE_URL}/notificationHub"
        self.bot = bot
        self.loop = loop
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏—Ö –ø–æ—Å—Ç–æ—è–Ω–Ω–æ
        self.user_tokens = {}

    async def start_connection(self, telegram_user_id: int, token: str):
        """
        –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ SignalR. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 
        –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        """
        if telegram_user_id in self.connections:
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è {telegram_user_id} –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ.")
            await self.stop_connection(telegram_user_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö API-–∑–∞–ø—Ä–æ—Å–æ–≤
        self.user_tokens[telegram_user_id] = token

        logger.info(f"–ó–∞–ø—É—Å–∫ SignalR —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å {self.hub_url} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}")

        connection = HubConnectionBuilder()\
            .with_url(self.hub_url, options={"access_token_factory": lambda: token})\
            .with_automatic_reconnect({
                "type": "interval",
                "keep_alive_interval": 10,
                "interval": 5,
                "max_attempts": 5
            })\
            .build()
        
        # --- Callbacks ---
        
        def on_notification_callback(message_list):
            """Callback –¥–ª—è –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –ø—Ä–∏—Ö–æ–¥—è—â–∏—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."""
            try:
                if not message_list: return
                message_content = message_list[0]
                self.loop.call_soon_threadsafe(
                    self._schedule_notification_processing, 
                    telegram_user_id, 
                    message_content
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ callback'–µ on_notification –¥–ª—è {telegram_user_id}: {e}", exc_info=True)

        def on_open_callback():
            """Callback, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
            logger.info(f"SignalR —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}")
            self.loop.call_soon_threadsafe(self._schedule_fetch_unread, telegram_user_id)
        
        def on_close_callback():
            """Callback –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
            logger.info(f"SignalR —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}")
            if telegram_user_id in self.connections:
                del self.connections[telegram_user_id]
        
        # --- –ü—Ä–∏–≤—è–∑–∫–∞ Callbacks ---
        connection.on("ReceiveNotification", on_notification_callback)
        connection.on_open(on_open_callback)
        connection.on_close(on_close_callback)
        connection.on_error(lambda error: logger.error(f"–û—à–∏–±–∫–∞ SignalR —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (callback) –¥–ª—è {telegram_user_id}: {error}"))

        try:
            await self.loop.run_in_executor(None, connection.start)
            self.connections[telegram_user_id] = connection
            logger.info(f"SignalR —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}. –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è...")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ SignalR —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è {telegram_user_id}: {e}", exc_info=True)
            if telegram_user_id in self.connections:
                del self.connections[telegram_user_id]

    # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á ---

    def _schedule_notification_processing(self, telegram_user_id: int, message_content: dict):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–¥–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        self.loop.create_task(self.process_and_send_notification(telegram_user_id, message_content))

    def _schedule_fetch_unread(self, telegram_user_id: int):
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        self.loop.create_task(self.fetch_unread_notifications(telegram_user_id))

    # --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---

    async def fetch_unread_notifications(self, telegram_user_id: int):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á–µ—Ä–µ–∑ REST API –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫—É."""
        token = self.user_tokens.get(telegram_user_id)
        if not token:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id} –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é.")
            return

        logger.info(f"–ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {telegram_user_id}")
        try:
            url = f"{API_BASE_URL}/api/Notifications"
            params = {"IsRead": "false", "PageNumber": 1, "PageSize": 50}
            headers = {"Authorization": f"Bearer {token}"}
            
            async with aiohttp.ClientSession(headers=headers) as session:
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        notifications = await response.json()
                        if not notifications:
                            logger.info(f"–ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {telegram_user_id}")
                            return
                        
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(notifications)} —Å—Ç–∞—Ä—ã—Ö –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {telegram_user_id}")
                        await self.bot.send_message(
                            chat_id=telegram_user_id,
                            text=f"üì¨ –£ –≤–∞—Å –µ—Å—Ç—å {len(notifications)} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..."
                        )
                        
                        for notification in notifications:
                            await self.process_and_send_notification(telegram_user_id, notification)
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –°—Ç–∞—Ç—É—Å: {response.status}, –û—Ç–≤–µ—Ç: {await response.text()}")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ fetch_unread_notifications –¥–ª—è {telegram_user_id}: {e}", exc_info=True)

    async def process_and_send_notification(self, telegram_user_id: int, message_content: dict):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –ø–æ–º–µ—á–∞–µ—Ç –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ API."""
        token = self.user_tokens.get(telegram_user_id)
        if not token:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id} –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
            return

        try:
            # 1. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            if isinstance(message_content, dict):
                # ... (–≤–∞—à –∫–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
                notification_text = "üîî <b>–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n"
                if 'type' in message_content: notification_text += f"üìå <b>–¢–∏–ø:</b> {message_content['type']}\n"
                if 'message' in message_content: notification_text += f"\nüí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{message_content['message']}\n"
                if 'createdAt' in message_content:
                    created_at = message_content['createdAt'].split('.')[0].replace('T', ' ')
                    notification_text += f"\nüïí <b>–°–æ–∑–¥–∞–Ω–æ:</b> {created_at}\n"
            else:
                notification_text = f"üîî <b>–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n{message_content}"

            # 2. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
            await self.bot.send_message(chat_id=telegram_user_id, text=notification_text, parse_mode='HTML')
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {message_content.get('id')} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_user_id}")

            # 3. –ü–æ–º–µ—Ç–∫–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ —á–µ—Ä–µ–∑ API
            notification_id = message_content.get('id')
            if notification_id:
                success = await self.mark_notification_as_read_api(notification_id, token)
                if success:
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ API.")
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ API.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ process_and_send_notification –¥–ª—è {telegram_user_id}: {e}", exc_info=True)

    async def mark_notification_as_read_api(self, notification_id: str, token: str) -> bool:
        """–ü–æ–º–µ—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ REST API."""
        url = f"{API_BASE_URL}/api/Notifications/{notification_id}/read"
        headers = {"Authorization": f"Bearer {token}"}
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ {url} –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ.")
        try:
            async with aiohttp.ClientSession(headers=headers) as session:
                async with session.post(url) as response:
                    if response.status in [200, 204]:  # 204 No Content —Ç–æ–∂–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è —É—Å–ø–µ—Ö–æ–º
                        return True
                    else:
                        logger.error(f"API –æ—Ç–≤–µ—Ç–∏–ª –æ—à–∏–±–∫–æ–π {response.status} –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification_id} –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ. –û—Ç–≤–µ—Ç: {await response.text()}")
                        return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification_id}: {e}", exc_info=True)
            return False

    # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ ---

    async def stop_connection(self, telegram_user_id: int):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        # –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤–º–µ—Å—Ç–µ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
        if telegram_user_id in self.user_tokens:
            del self.user_tokens[telegram_user_id]
            
        connection = self.connections.pop(telegram_user_id, None)
        if connection:
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ SignalR —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}.")
            try:
                await self.loop.run_in_executor(None, connection.stop)
                logger.info(f"SignalR —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id}.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ SignalR —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è {telegram_user_id}: {e}", exc_info=True)
        else:
            logger.info(f"–ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    
    def get_connection(self, telegram_id: int) -> Optional[BaseHubConnection]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
        return self.connections.get(telegram_id)

    async def stop_all_connections(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è SignalR –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
        logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö {len(self.connections)} SignalR —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.")
        user_ids = list(self.connections.keys())
        tasks = [self.stop_connection(user_id) for user_id in user_ids]
        await asyncio.gather(*tasks)
        logger.info("–í—Å–µ SignalR —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")